{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hatem\\\\Downloads\\\\New folder (4)\\\\HegemonyDaap\\\\src\\\\interact.js\";\nimport { useEffect, useState } from \"react\";\nimport { contractABI } from './abi';\nimport { EventAbi } from './EventAbi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst alchemyKey = \"https://eth-mainnet.g.alchemy.com/v2/9YkULSmxC2HB8TD7N01E0NMceYtP9KUh\";\nconst TestnetRPC = \"https://sepolia.infura.io/v3/\";\nconst alchemyKeyPolygon = \"https://polygon-rpc.com\";\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst {\n  ethers,\n  Wallet\n} = require(\"ethers\");\n\n// const web3 = createAlchemyWeb3(alchemyKey);\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractAddress = \"0x6c8aBf74831A94eb339639039f824EeA6C26Fe1a\";\nconst EventcontractAddress = \"0x643A113A4FE9C003966B4D2Fecd195828BA4f20C\";\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"\" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getNumberOfMints = async () => {\n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const mintNumber = await nftContract.methods.totalSupply().call();\n  console.log(mintNumber);\n  return mintNumber;\n};\nexport const mintNFT = async _amount => {\n  //error handling\n  console.log(window.ethereum.selectedAddress);\n  const provider = new ethers.providers.JsonRpcProvider(alchemyKey);\n  const gasPrice = await provider.getFeeData();\n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const balance = await nftContract.methods.balanceOf(window.ethereum.selectedAddress).call();\n  let amount = _amount;\n  if (Number(balance) == 0) {\n    amount = amount - 1;\n  }\n  const val = Number(amount * 0.004 * 1e18).toString(16);\n  //set up your Ethereum transaction\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    maxPriorityFeePerGas: web3.utils.toHex(gasPrice.maxPriorityFeePerGas.toString()),\n    maxFeePerGas: web3.utils.toHex(gasPrice.maxFeePerGas.toString()),\n    gas: ethers.BigNumber.from(400000).toHexString(),\n    value: \"0x\" + val,\n    'data': nftContract.methods.mint(_amount).encodeABI() //make call to NFT smart contract \n    //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n  };\n\n  console.log(transactionParameters);\n  //sign transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    // console.log(txHash);\n    return {\n      success: true,\n      status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message\n    };\n  }\n};\nexport const mintNFTWC = async (connector, account, _amount) => {\n  //error handling\n  const provider = new ethers.providers.JsonRpcProvider(alchemyKey);\n  const gasPrice = await provider.getFeeData();\n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const balance = await nftContract.methods.balanceOf(window.ethereum.selectedAddress).call();\n  let amount = _amount;\n  if (Number(balance) == 0) {\n    amount = amount - 1;\n  }\n  const val = Number(amount * 0.004 * 1e18).toString(16);\n  //set up your Ethereum transaction\n  const tx = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: account,\n    // must match user's active address.\n    maxPriorityFeePerGas: web3.utils.toHex(gasPrice.maxPriorityFeePerGas.toString()),\n    maxFeePerGas: web3.utils.toHex(gasPrice.maxFeePerGas.toString()),\n    gas: ethers.BigNumber.from(400000).toHexString(),\n    value: \"0x\" + val,\n    'data': nftContract.methods.mint(_amount).encodeABI() //make call to NFT smart contract \n    //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n  };\n  //sign transaction via Metamask\n  try {\n    connector.sendTransaction(tx).then(result => {\n      // Returns transaction id (hash)\n      console.log(result);\n      return {\n        success: true,\n        status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + result\n      };\n    }).catch(error => {\n      // Error returned when rejected\n      console.error(error);\n    });\n  } catch (error) {\n    return {\n      success: false,\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message\n    };\n  }\n};\nexport const AddEventC = async (maxParticipations, Type, description, Title) => {\n  //error handling\n\n  const nftContract = await new web3Poly.eth.Contract(EventAbi, EventcontractAddress);\n  //set up your Ethereum transaction\n  const transactionParameters = {\n    to: EventcontractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    gasPrice: web3Poly.utils.toHex(web3.utils.toWei('30', 'gwei')),\n    gas: \"0x50000\",\n    'data': nftContract.methods.AddEvent(maxParticipations, Type, description, Title).encodeABI() //make call to NFT smart contract \n    //Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n  };\n\n  console.log(transactionParameters);\n  //sign transaction via Metamask\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    // console.log(txHash);\n    return {\n      success: true,\n      txHash: txHash,\n      status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"ðŸ˜¥ Something went wrong: \" + error.message\n    };\n  }\n};\n_c = AddEventC;\nvar _c;\n$RefreshReg$(_c, \"AddEventC\");","map":{"version":3,"names":["useEffect","useState","contractABI","EventAbi","jsxDEV","_jsxDEV","alchemyKey","TestnetRPC","alchemyKeyPolygon","createAlchemyWeb3","require","ethers","Wallet","web3","contractAddress","EventcontractAddress","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","message","children","target","href","fileName","_jsxFileName","lineNumber","columnNumber","getCurrentWalletConnected","length","getNumberOfMints","nftContract","eth","Contract","mintNumber","methods","totalSupply","call","console","log","mintNFT","_amount","selectedAddress","provider","providers","JsonRpcProvider","gasPrice","getFeeData","balance","balanceOf","amount","Number","val","toString","transactionParameters","to","from","maxPriorityFeePerGas","utils","toHex","maxFeePerGas","gas","BigNumber","toHexString","value","mint","encodeABI","txHash","params","success","error","mintNFTWC","connector","account","tx","sendTransaction","then","result","catch","AddEventC","maxParticipations","Type","description","Title","web3Poly","toWei","AddEvent","_c","$RefreshReg$"],"sources":["C:/Users/hatem/Downloads/New folder (4)/HegemonyDaap/src/interact.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { contractABI } from './abi';\nimport { EventAbi } from './EventAbi';\nconst alchemyKey=\"https://eth-mainnet.g.alchemy.com/v2/9YkULSmxC2HB8TD7N01E0NMceYtP9KUh\";\nconst TestnetRPC= \"https://sepolia.infura.io/v3/\";\nconst alchemyKeyPolygon=\"https://polygon-rpc.com\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst {ethers, Wallet} = require(\"ethers\");\n\n// const web3 = createAlchemyWeb3(alchemyKey);\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractAddress = \"0x6c8aBf74831A94eb339639039f824EeA6C26Fe1a\";\nconst EventcontractAddress = \"0x643A113A4FE9C003966B4D2Fecd195828BA4f20C\";\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            ðŸ¦Š{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"\" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            {\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\nexport const getNumberOfMints = async() => {\n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const mintNumber =await nftContract.methods.totalSupply().call()  ;\n  console.log(mintNumber)\n  return mintNumber;\n}\nexport const mintNFT = async(_amount) => {\n //error handling\n console.log(window.ethereum.selectedAddress);\n  const provider= new ethers.providers.JsonRpcProvider(alchemyKey);\n\t   const gasPrice = await provider.getFeeData();\n  \n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const balance =await nftContract.methods.balanceOf(window.ethereum.selectedAddress).call()  ;\n\n  \n  let amount = _amount;\n  if ( Number(balance)==0)\n  {\n    amount=amount-1\n  }\n  const val= Number(amount * 0.004 * 1e18).toString(16);\n    //set up your Ethereum transaction\n    const transactionParameters = {\n        to: contractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        maxPriorityFeePerGas: web3.utils.toHex(gasPrice.maxPriorityFeePerGas.toString()),\n        maxFeePerGas: web3.utils.toHex(gasPrice.maxFeePerGas.toString()),\n        gas: ethers.BigNumber.from(400000).toHexString(),\n\t\tvalue: \"0x\" + val,\n        'data': nftContract.methods.mint(_amount).encodeABI() //make call to NFT smart contract \n\t\t//Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n    };\n    console.log(transactionParameters)\n    //sign transaction via Metamask\n    try {\n        const txHash = await window.ethereum.request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        // console.log(txHash);\n        return {\n            success: true,\n            status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"ðŸ˜¥ Something went wrong: \" + error.message\n        }\n    }\n}\nexport const mintNFTWC = async(connector,account,_amount) => {\n //error handling\n  \tconst provider= new ethers.providers.JsonRpcProvider(alchemyKey);\n\t   const gasPrice = await provider.getFeeData();\n\n  const nftContract = await new web3.eth.Contract(contractABI, contractAddress);\n  const balance =await nftContract.methods.balanceOf(window.ethereum.selectedAddress).call()  ;\n\n  \n  let amount = _amount;\n  if ( Number(balance)==0)\n  {\n    amount=amount-1\n  }\n  const val= Number(amount * 0.004 * 1e18).toString(16);\n    //set up your Ethereum transaction\n    const tx = {\n        to: contractAddress, // Required except during contract publications.\n        from: account, // must match user's active address.\n        maxPriorityFeePerGas: web3.utils.toHex(gasPrice.maxPriorityFeePerGas.toString()),\n        maxFeePerGas: web3.utils.toHex(gasPrice.maxFeePerGas.toString()),\n        gas: ethers.BigNumber.from(400000).toHexString(),\n\n       \n\t\tvalue: \"0x\" + val,\n        'data': nftContract.methods.mint(_amount).encodeABI() //make call to NFT smart contract \n\t\t//Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n    };\n    //sign transaction via Metamask\n    try {\n        connector\n  .sendTransaction(tx)\n  .then((result) => {\n    // Returns transaction id (hash)\n\tconsole.log(result);\n\t return {\n            success: true,\n            status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + result\n        }\n    \n  })\n  .catch((error) => {\n    // Error returned when rejected\n    console.error(error);\n  });\n    } catch (error) {\n        return {\n            success: false,\n            status: \"ðŸ˜¥ Something went wrong: \" + error.message\n        }\n    }\n}\n\nexport const AddEventC = async(maxParticipations,Type,description,Title) => {\n //error handling\n  \n  const nftContract = await new web3Poly.eth.Contract(EventAbi, EventcontractAddress);\n    //set up your Ethereum transaction\n    const transactionParameters = {\n        to: EventcontractAddress, // Required except during contract publications.\n        from: window.ethereum.selectedAddress, // must match user's active address.\n        gasPrice: web3Poly.utils.toHex(web3.utils.toWei('30','gwei')),  \n        gas: \"0x50000\",\n        'data': nftContract.methods.AddEvent(maxParticipations,Type,description,Title).encodeABI() //make call to NFT smart contract \n\t\t//Web3.utils.toBN(Web3.utils.toWei(val, \"ether\")).toString(16)\n    };\n    console.log(transactionParameters)\n    //sign transaction via Metamask\n    try {\n        const txHash = await window.ethereum.request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        // console.log(txHash);\n        return {\n            success: true,\n\t\t\ttxHash : txHash,\n            status: \"âœ… Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n        }\n    } catch (error) {\n        return {\n            success: false,\n            status: \"ðŸ˜¥ Something went wrong: \" + error.message\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}